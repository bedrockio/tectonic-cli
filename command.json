{
  "name": "tectonic",
  "description": "Command line interface for creating and controlling Tectonic deployments",
  "commands": [
    {
      "name": "create",
      "description": "Create a new Tectonic deployment.",
      "arguments": [
        {
          "name": "project",
          "type": "string",
          "description": "gCloud project ID",
          "required": true,
          "prompt": true
        },
        {
          "name": "environment",
          "type": "string",
          "description": "Environment",
          "required": true,
          "prompt": true,
          "initial": "staging"
        }
      ],
      "options": []
    },
    {
      "name": "cloud",
      "description": "Cloud Controls for deployment and provisioning",
      "commands": [
        {
          "name": "login",
          "description": "Login to Google Cloud"
        },
        {
          "name": "login-application",
          "functionName": "loginApplication",
          "description": "Login application-default to Google Cloud"
        },
        {
          "name": "account",
          "description": "Set Google Cloud account",
          "arguments": [
            {
              "name": "name",
              "type": "string",
              "description": "Switch to Google Cloud account with <name> (e.g. john.doe@gmail.com)"
            }
          ]
        },
        {
          "name": "authorize",
          "description": "Authorize cloud environment",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            }
          ]
        },
        {
          "name": "status",
          "description": "Get status of cloud deployment",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            }
          ]
        },
        {
          "name": "rollout",
          "description": "Rollout service to cluster",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            },
            {
              "name": "service",
              "type": "string",
              "description": "Service (e.g. api)"
            },
            {
              "name": "subservice",
              "type": "string",
              "description": "SubService (e.g. cli)"
            }
          ]
        },
        {
          "name": "remove",
          "description": "Delete service from cluster",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            },
            {
              "name": "service",
              "type": "string",
              "description": "Service (e.g. api)"
            },
            {
              "name": "subservice",
              "type": "string",
              "description": "SubService (e.g. cli)"
            }
          ]
        },
        {
          "name": "info",
          "description": "Deployment info",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            },
            {
              "name": "service",
              "type": "string",
              "description": "Service (e.g. api)"
            },
            {
              "name": "subservice",
              "type": "string",
              "description": "SubService (e.g. cli)"
            }
          ]
        },
        {
          "name": "shell",
          "description": "Start remote bash shell on service container",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            },
            {
              "name": "service",
              "type": "string",
              "description": "Service (e.g. api)"
            },
            {
              "name": "subservice",
              "type": "string",
              "description": "SubService (e.g. cli)"
            }
          ]
        },
        {
          "name": "logs",
          "description": "Open Google Cloud logs explorer UI in your browser",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            },
            {
              "name": "service",
              "type": "string",
              "description": "Service (e.g. api)"
            },
            {
              "name": "subservice",
              "type": "string",
              "description": "SubService (e.g. cli)"
            }
          ]
        },
        {
          "name": "bootstrap",
          "description": "Bootstrap GKE cluster",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            },
            {
              "name": "project",
              "type": "string",
              "description": "Google Cloud project id (e.g. bedrock-foundation)"
            }
          ]
        },
        {
          "name": "port-forward",
          "description": "port-forward service to localhost",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            },
            {
              "name": "service",
              "type": "string",
              "description": "Service (e.g. api)"
            },
            {
              "name": "subservice",
              "type": "string",
              "description": "SubService (e.g. cli)"
            },
            {
              "name": "localPort",
              "type": "string",
              "description": "Local Port number"
            },
            {
              "name": "remotePort",
              "type": "string",
              "description": "Remote Port number"
            }
          ]
        },
        {
          "name": "kibana",
          "description": "port-forward service for kibana to localhost",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            },
            {
              "name": "localPort",
              "type": "string",
              "description": "Local Port number (default 5602)"
            },
            {
              "name": "remotePort",
              "type": "string",
              "description": "Remote Port number (default 5601)"
            }
          ]
        },
        {
          "name": "provision",
          "description": "Provision cluster on Google Cloud with Terraform (subcommands: <plan>, <apply>, <init> and <destroy>)",
          "commands": [
            {
              "name": "plan",
              "functionName": "terraformPlan",
              "description": "Terraform plan provisioning of cluster",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                }
              ]
            },
            {
              "name": "apply",
              "functionName": "terraformApply",
              "description": "Terraform apply provisioning plan of cluster",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                }
              ]
            },
            {
              "name": "init",
              "functionName": "terraformInit",
              "description": "Terraform initialize provisioning",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                }
              ]
            },
            {
              "name": "refresh",
              "functionName": "terraformRefresh",
              "description": "Terraform apply -refresh-only",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                }
              ]
            },
            {
              "name": "reconfigure",
              "functionName": "terraformReconfigure",
              "description": "Terraform initialize provisioning with -reconfigure",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                }
              ]
            },
            {
              "name": "migrate",
              "functionName": "terraformMigrate",
              "description": "Terraform initialize provisioning with -migrate-state",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                }
              ]
            },
            {
              "name": "destroy",
              "functionName": "terraformDestroy",
              "description": "Terraform destroy provisioned cluster",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                }
              ]
            }
          ]
        },
        {
          "name": "secret",
          "description": "Deploy and update Secrets (subcommands: <get>, <set>, <info> and <delete>)",
          "commands": [
            {
              "name": "get",
              "functionName": "secretGet",
              "description": "Get Secret from cluster and store in local <secret-name>.conf file",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Secret name (e.g. credentials)"
                }
              ]
            },
            {
              "name": "set",
              "functionName": "secretSet",
              "description": "Push secret to cluster from local <secret-name>.conf file",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Secret name (e.g. credentials)"
                }
              ]
            },
            {
              "name": "info",
              "functionName": "secretInfo",
              "description": "Retrieve secret info from cluster",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Secret name (e.g. credentials)"
                }
              ]
            },
            {
              "name": "delete",
              "functionName": "secretDelete",
              "description": "Delete secret from cluster",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Secret name (e.g. credentials)"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "up",
      "description": "Run local instance with docker compose"
    },
    {
      "name": "update",
      "description": "Updates this script."
    },
    {
      "name": "hash",
      "description": "Show installed git hash"
    }
  ]
}
